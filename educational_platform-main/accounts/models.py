from django.db import models
from django.conf import settings
from django.contrib.auth.models import AbstractUser
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.db.models import JSONField

# --------------------------------------
# üë§ –ö–∞—Å—Ç–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# --------------------------------------
class CustomUser(AbstractUser):
    """
    –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ email.
    Email —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–Ω.
    """
    email = models.EmailField(unique=True, verbose_name="Email")
    phone = models.CharField(max_length=20, unique=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    year = models.PositiveSmallIntegerField(null=True, blank=True, verbose_name="–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è")
    is_editor = models.BooleanField(default=False, verbose_name="–†–µ–¥–∞–∫—Ç–æ—Ä")

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username', 'phone']

    def __str__(self):
        return self.email

    class Meta:
        verbose_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        verbose_name_plural = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"

# --------------------------------------
# üìÑ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–æ–ª—å, —Ç–µ–ª–µ–≥—Ä–∞–º, –±–∞–ª–∞–Ω—Å)
# --------------------------------------
class UserProfile(models.Model):
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        related_name="profile"
    )
    telegram_id = models.CharField(
        max_length=64,
        unique=True,
        null=True,
        blank=True,
        verbose_name="Telegram ID"
    )

    def __str__(self):
        return f"{self.user.email}"

    class Meta:
        verbose_name = "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        verbose_name_plural = "–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

# --------------------------------------
# üí∞ –¢–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# --------------------------------------
class UserToken(models.Model):
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='tokens',
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )
    balance = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        default=0,
        verbose_name="–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤"
    )

    def __str__(self):
        return f"{self.user.email} ‚Äî {self.balance} —Ç–æ–∫–µ–Ω–æ–≤"

    class Meta:
        verbose_name = "–¢–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        verbose_name_plural = "–¢–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

# --------------------------------------
# üîî –°–∏–≥–Ω–∞–ª—ã: –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ç–æ–∫–µ–Ω–æ–≤
# --------------------------------------
@receiver(post_save, sender=settings.AUTH_USER_MODEL)
def create_user_profile_and_tokens(sender, instance, created, **kwargs):
    if created:
        UserProfile.objects.create(user=instance)
        UserToken.objects.create(user=instance)

# --------------------------------------
# üí∏ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
# --------------------------------------
class TokenPurchase(models.Model):
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='token_purchases',
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )
    amount = models.PositiveIntegerField(verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤")
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–°—Ç–æ–∏–º–æ—Å—Ç—å")
    purchased_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏")

    def __str__(self):
        return f"{self.user.email} - {self.amount} —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ {self.price}‚ÇΩ"

    class Meta:
        verbose_name = "–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤"
        verbose_name_plural = "–ü–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤"
        ordering = ['-purchased_at']

# –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
class Course(models.Model):
    SUBJECT_CHOICES = [
        ('math', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'),
        ('eco', '–≠–∫–æ–Ω–æ–º–∏–∫–∞'),
        ('phys', '–§–∏–∑–∏–∫–∞'),
    ]
    LEVEL_CHOICES = [
        ('easy', '–õ—ë–≥–∫–∏–π'),
        ('medium', '–°—Ä–µ–¥–Ω–∏–π'),
        ('hard', '–°–ª–æ–∂–Ω—ã–π'),
        ('advanced', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'),
    ]
    editor = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    subject = models.CharField(max_length=20, choices=SUBJECT_CHOICES)
    tags = models.CharField(max_length=255, help_text="–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
    level = models.CharField(max_length=20, choices=LEVEL_CHOICES)
    description = models.TextField(blank=True, null=True)
    is_draft = models.BooleanField(default=True)
    is_approved = models.BooleanField(default=False)

    def tag_list(self):
        return [tag.strip() for tag in self.tags.split(',')]

    def __str__(self):
        return self.title

class CourseTopic(models.Model):
    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name='topics')
    title = models.CharField(max_length=255)
    order = models.PositiveIntegerField(default=0)

    class Meta:
        ordering = ['order']

    def __str__(self):
        return f"{self.course.title} - {self.title}"

class Lesson(models.Model):
    topic = models.ForeignKey(CourseTopic, on_delete=models.CASCADE, related_name='lessons')
    title = models.CharField(max_length=255)
    price_in_tokens = models.PositiveIntegerField()
    order = models.PositiveIntegerField(default=0)

    class Meta:
        ordering = ['order']

    def __str__(self):
        return f"{self.topic.title} - {self.title}"

class LessonContent(models.Model):
    lesson = models.ForeignKey(
        'Lesson',
        on_delete=models.CASCADE,
        related_name='contents'
    )
    order = models.PositiveIntegerField(default=0)
    CONTENT_TYPES = [
        ('text', '–¢–µ–∫—Å—Ç'),
        ('pdf', 'PDF'),
        ('video', '–í–∏–¥–µ–æ'),
        ('quiz', '–¢–µ—Å—Ç'),
        ('task', '–ó–∞–¥–∞—á–∞'),
        ('open', '–û—Ç–∫—Ä—ã—Ç—ã–π –æ—Ç–≤–µ—Ç'),
    ]
    content_type = models.CharField(
        max_length=10,
        choices=CONTENT_TYPES
    )
    text = models.TextField(blank=True, null=True)
    pdf_title = models.CharField(max_length=255, blank=True, null=True)
    pdf_file = models.FileField(upload_to='lesson_pdfs/', blank=True, null=True)
    video_title = models.CharField(max_length=255, blank=True, null=True)
    video_url = models.URLField(blank=True, null=True)
    video_description = models.TextField(blank=True, null=True)
    quiz_title = models.CharField(max_length=255, blank=True, null=True)
    quiz_question = models.TextField(blank=True, null=True)
    quiz_options = models.JSONField(blank=True, null=True)
    quiz_explanation = models.TextField(blank=True, null=True)
    quiz_correct_answer = models.CharField(max_length=255, blank=True, null=True)
    task_title = models.CharField(max_length=255, blank=True, null=True)
    task_description = models.TextField(blank=True, null=True)
    task_image = models.ImageField(upload_to='task_images/', blank=True, null=True, help_text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏")
    task_image_description = models.TextField(blank=True, null=True)
    TASK_ANSWER_TYPES = [
        ('text', '–¢–µ–∫—Å—Ç–æ–≤—ã–π'),
        ('number', '–ß–∏—Å–ª–æ–≤–æ–π'),
        ('formula', '–§–æ—Ä–º—É–ª–∞'),
    ]
    task_answer_type = models.CharField(
        max_length=20,
        choices=TASK_ANSWER_TYPES,
        blank=True,
        null=True
    )
    task_correct_answer = models.CharField(max_length=255, blank=True, null=True)
    task_hint = models.TextField(blank=True, null=True)
    open_title = models.CharField(max_length=255, blank=True, null=True)
    open_description = models.TextField(blank=True, null=True)
    open_image = models.ImageField(
        upload_to='open_answers/',
        blank=True,
        null=True
    )
    open_criteria = models.JSONField(
        blank=True,
        null=True,
        help_text='–°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏ –±–∞–ª–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä [{"criterion": "...", "points": 2}, ...]'
    )
    open_max_attempts = models.PositiveIntegerField(
        default=1,
        help_text='–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç'
    )

    class Meta:
        ordering = ['order']

    def __str__(self):
        return f"{self.lesson.title} ‚Äî {self.get_content_type_display()}"

class OpenAnswerAttempt(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    content = models.ForeignKey(LessonContent, on_delete=models.CASCADE)
    answer_text = models.TextField()
    scores = JSONField()
    total_score = models.IntegerField()
    created_at = models.DateTimeField(auto_now_add=True)

class PurchasedLesson(models.Model):
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='purchased_lessons'
    )
    lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE)
    purchased_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('user', 'lesson')

    def __str__(self):
        return f"{self.user.email} - {self.lesson.title}"

class OpenQuestion(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField()
    image = models.ImageField(upload_to='open_questions/', null=True, blank=True)
    criteria = models.JSONField(default=list, help_text="–°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ü–µ–Ω–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{'criterion': '–ö—Ä–∏—Ç–µ—Ä–∏–π', 'points': 10}]")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.title



class LessonProgress(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE)
    completed_blocks = models.JSONField(default=list, help_text="–°–ø–∏—Å–æ–∫ ID –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤")
    total_score = models.IntegerField(default=0)
    is_completed = models.BooleanField(default=False)
    last_accessed = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ['user', 'lesson']

    def __str__(self):
        return f"{self.user.username} - {self.lesson.title}"

    def calculate_progress(self):
        total_blocks = self.lesson.content_blocks.count()
        if total_blocks == 0:
            return 0
        return round((len(self.completed_blocks) / total_blocks) * 100)

    def update_progress(self, block_id):
        if block_id not in self.completed_blocks:
            self.completed_blocks.append(block_id)
            self.save()
            return True
        return False

class UserAnswer(models.Model):
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='answers'
    )
    content = models.ForeignKey(
        'LessonContent',
        on_delete=models.CASCADE,
        related_name='user_answers'
    )
    answer = models.TextField()
    is_correct = models.BooleanField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ('user', 'content')
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.user.username} - {self.content}"